<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pres on Kandasamy Chokkalingam</title><link>https://www.kandasamyc.com/pres/</link><description>Recent content in Pres on Kandasamy Chokkalingam</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>©2021-2024 Kandasamy Chokkalingam</copyright><atom:link href="https://www.kandasamyc.com/pres/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://www.kandasamyc.com/pres/cliandyou/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.kandasamyc.com/pres/cliandyou/</guid><description>&lt;!doctype html> The CLI and You: A Love Story The CLI and you A Love Story An Educational Story Overview We'll be making a simple TODO app (very unique)
We'll introduce new features/commands as we go on
I've included the scripts in the github repo, but I recommend you try and type it out too
Why should you love the CLI? It's everywhere
It's powerful
It will never leave you</description><content>&lt;!doctype html>
&lt;html lang="en">
&lt;head>
&lt;meta charset="utf-8">
&lt;title>The CLI and You: A Love Story&lt;/title>
&lt;meta name="description" content="A presentation about the CLI">
&lt;meta name="author" content="Kandasamy Kandasamy Chokkalingam">
&lt;meta name="apple-mobile-web-app-capable" content="yes">
&lt;meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
&lt;script src="https://livejs.com/live.js">&lt;/script>
&lt;meta name="viewport" content="width=device-width, initial-scale=1.0">
&lt;link rel="stylesheet" href="https://rsms.me/inter/inter.css">
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/aymanbagabas/iosevka-fonts/dist/iosevka/iosevka.min.css">
&lt;link rel="stylesheet" href="https://www.kandasamyc.com/css/pres/cliandyou/reset.css">
&lt;link rel="stylesheet" href="https://www.kandasamyc.com/css/pres/cliandyou/reveal.css">
&lt;link rel="stylesheet" href="https://www.kandasamyc.com/css/pres/cliandyou/ksam.css" id="theme">
&lt;!-- Theme used for syntax highlighting of code -->
&lt;link rel="stylesheet" href="https://www.kandasamyc.com/js/pres/cliandyou/plugin/highlight/atom-one-dark.css">
&lt;/head>
&lt;body>
&lt;div class="reveal">
&lt;!-- Any section element inside of this container is displayed as a slide -->
&lt;div class="slides">
&lt;section>
&lt;h1>The CLI and you&lt;/h1>
&lt;h3>&lt;strike>A Love Story&lt;/strike>&lt;/h3>
&lt;h3>An Educational Story&lt;/h3>
&lt;/section>
&lt;section>
&lt;h2>Overview&lt;/h2>
&lt;p>We'll be making a simple TODO app (very unique)&lt;/p>
&lt;p>We'll introduce new features/commands as we go on&lt;/p>
&lt;p>I've included the scripts in the github repo, but I recommend you try and type it out too&lt;/p>
&lt;/section>
&lt;section>
&lt;h2>Why should you love the CLI?&lt;/h2>
&lt;p class="fragment">It's everywhere&lt;/p>
&lt;p class="fragment">It's powerful&lt;/p>
&lt;p class="fragment">It will never leave you&lt;/p>
&lt;/section>
&lt;section>
&lt;h1>Who is using the CLI?&lt;/h2>
&lt;h1 class="r-fit-text fragment" data-fragment-index="1">everyone&lt;span class="fragment" data-fragment-index="2">*&lt;/span>&lt;/h1>
&lt;p class="fragment" data-fragment-index="2">*I Think&lt;/p>
&lt;/section>
&lt;section>
&lt;h2>Terminology&lt;/h2>
&lt;p>&lt;b>Kernel&lt;/b>: Operating System Core&lt;/p>
&lt;p>&lt;b>Shell&lt;/b>: OS's outermost user interface&lt;/p>
&lt;p>&lt;b>Console&lt;/b>: Physical Terminal&lt;/p>
&lt;p>&lt;b>Terminal&lt;/b>: Text Input/Output Environment&lt;/p>
&lt;p>&lt;b>Terminal Emulator&lt;/b>: Text Input/Output Environment provided by some software program&lt;/p>
&lt;p>&lt;b>Command Line Interface&lt;/b>: Some sort of text interface where commands are input and executed using &lt;code>Return&lt;/code>&lt;/p>
&lt;/section>
&lt;section>
&lt;h2>CLI Basics&lt;/h2>
&lt;p>&lt;b>ls&lt;/b> lists files in directory&lt;/p>
&lt;p>&lt;b>cd&lt;/b> changes directories (.. is the parent directory)&lt;/p>
&lt;p>&lt;b>pwd&lt;/b> prints the name of the current directory&lt;/p>
&lt;p>&lt;b>&lt;code>CTRL+C&lt;/code>&lt;/b> kills the running command&lt;/p>
&lt;p>&lt;b>&lt;code>↑&lt;/code>&lt;/b> Gets the previous command&lt;/p>
&lt;p>&lt;b>&lt;code>TAB&lt;/code>&lt;/b> Autocompletes&lt;/p>
&lt;/section>
&lt;section>
&lt;h2>Running Bash Programs&lt;/h2>
&lt;p>We can run commands one at a time in the CLI&lt;/p>
&lt;p>We can also put them into executable files to run many&lt;/p>
&lt;/section>
&lt;section>
&lt;h2>Setup&lt;/h2>
&lt;p>If you haven't already, fork and clone the &lt;a href="https://github.com/kandasamyc/cliandyou">workshop repo&lt;/a>&lt;/p>
&lt;p>Change directories into there&lt;/p>
&lt;p>Each piece of this workshop has a specific folder&lt;/p>
&lt;p>You should create your own file to work in&lt;/p>
&lt;p>Each folder will have an answer file too&lt;/p>
&lt;/section>
&lt;section>
&lt;h1>Part 1: Hello, World!&lt;/h1>
&lt;/section>
&lt;section>
&lt;h2>&lt;code>echo&lt;/code>&lt;/h2>
&lt;p>&lt;code>echo&lt;/code> prints a given string to standard output&lt;/p>
&lt;pre>&lt;code class="language-bash"> &amp;gt;&amp;gt;&amp;gt; echo "Hello, World!"&lt;/code>&lt;/pre>
&lt;/section>
&lt;section>
&lt;h2>Out of the CLI, into the file&lt;/h2>
&lt;p>Let's make a file called &lt;code>part1&lt;/code>&lt;/p>
&lt;p>Bash files commonly have no extension but .sh is used sometimes&lt;/p>
&lt;p>Run this command in the part1 directory&lt;/p>
&lt;pre>&lt;code class="language-bash"> ksam@laptop:~/cliandyou/part1$ touch part1&lt;/code>&lt;/pre>
&lt;p>&lt;code>touch&lt;/code> creates an empty file with the given name in the current directory&lt;/p>
&lt;/section>
&lt;section>
&lt;h2>Out of the CLI, into the file&lt;/h2>
&lt;p>Open &lt;code>part1&lt;/code> in an editor&lt;/p>
&lt;pre>&lt;code class="language-bash" data-trim data-line-numbers="1|3">
#!/bin/bash
echo "Hello, World!"
&lt;/code>&lt;/pre>
&lt;p>Line 1 is a &lt;b>shebang&lt;/b> that tells the OS what interpreter to use&lt;/p>
&lt;p>&lt;code class="language-bash">#!/usr/bin/env bash&lt;/code> is another common one for bash&lt;/p>
&lt;/section>
&lt;section>
&lt;h2>Running bash scripts&lt;/h2>
&lt;p>There are two ways to run scripts, with just the path or with another command&lt;/p>
&lt;p>We can type the file's name with a relative or absolute path&lt;/p>
&lt;pre>&lt;code class="language-bash" data-trim data-line-numbers="">
ksam@laptop:~/cliandyou/part1$ ./part1
ksam@laptop:~/cliandyou/part1$ /path/to/cliandyou/folder/part1/part1
&lt;/code>&lt;/pre>
&lt;p>Or we can use a shell command like &lt;code>bash&lt;/code> or &lt;code>sh&lt;/code>&lt;/p>
&lt;pre>&lt;code class="language-bash" data-trim data-line-numbers="">
ksam@laptop:~/cliandyou/part1$ bash part1
ksam@laptop:~/cliandyou/part1$ sh part1
ksam@laptop:~/cliandyou/part1$ bash /path/to/cliandyou/folder/part1/part1
&lt;/code>&lt;/pre>
&lt;/section>
&lt;section>
&lt;h2>A Small Issue&lt;/h2>
&lt;p>If you tried the path method above, it doesn't work (yet)&lt;/p>
&lt;pre>&lt;code>bash: ./part1: Permission denied&lt;/code>&lt;/pre>
&lt;p>All files have permissions that dicatate if they can be read, written, or executed by the owner, group, or everyone&lt;/p>
&lt;pre>&lt;code class="language-bash" data-trim>
ksam@laptop:~/cliandyou/part1$ ls -l
total 1
-rw-rw-r-- 1 ksam ksam 35 Nov 25 18:14 part1
&lt;/code>&lt;/pre>
&lt;p>&lt;code>ls -l&lt;/code> lists all the files (non-hidden) with more info&lt;/p>
&lt;p>We can solve this by adding execution permissions&lt;/p>
&lt;pre>&lt;code class="language-bash" data-trim>ksam@laptop:~/cliandyou/part1$ chmod +x&lt;/code>&lt;/pre>
&lt;/section>
&lt;section>
&lt;h1>Part 2: Conditionals, Functions, and IO&lt;/h1>
&lt;/section>
&lt;section>
&lt;h2>Details, Details&lt;/h2>
&lt;p>We'll have 4 actions&lt;/p>
&lt;p>add: Adds a task with a name, due date and category&lt;/p>
&lt;p>info: lists all tasks that are done, pending or all&lt;/p>
&lt;p>delete: Removes a task with a given name&lt;/p>
&lt;p>progress: Moves a task from todo -> pending -> done&lt;/p>
&lt;/section>
&lt;section>
&lt;h2>Positional Parameters&lt;/h2>
&lt;pre>&lt;code class="language-bash">ksam@laptop:~/cliandyou/part2$ part2 add "Get Eggs" "2021-12-02" "shopping"&lt;/code>&lt;/pre>
&lt;p>We can get each of these with a &lt;b>Positional Parameter&lt;/b> in the form of &lt;code>$number&lt;/code>&lt;/p>
&lt;p>Each thing separated by a space counts as its own argument&lt;/p>
&lt;p>Counting starts from 1, 0 is the command run&lt;/p>
&lt;pre>
&lt;code class="language-bash" data-line-numbers="" data-trim>
echo $1 # prints add
echo $2 # prints Get Eggs
echo $3 # prints 2021-12-02
echo $4 # prints shopping
&lt;/code>
&lt;/pre>
&lt;/section>
&lt;section>
&lt;h2>If,&lt;/h2>
&lt;p>If the command is add, print a&lt;/p>
&lt;pre>
&lt;code class="language=bash" data-line-numbers="" data-trim>
if [ $1 == "add" ]
then
echo "a"
fi
&lt;/code>
&lt;/pre>
&lt;/section>
&lt;section>
&lt;h2>Else if,&lt;/h2>
&lt;p>Otherwise, check if its any of the other commands and print their first letter&lt;/p>
&lt;pre>
&lt;code class="language-bash" data-line-numbers="" data-trim>
if [ $1 == "add" ]; then
echo "a"
elif [ $1 == "info" ]; then
echo "i"
elif [ $1 == "delete" ]; then
echo "d"
elif [ $1 == "progress" ]; then
echo "p"
fi
&lt;/code>
&lt;/pre>
&lt;/section>
&lt;section>
&lt;h2>else.&lt;/h2>
&lt;p>Else, print a warning&lt;/p>
&lt;pre>
&lt;code class="language-bash" data-line-numbers="" data-trim>
if [ $1 == "add" ]; then
echo "a"
elif [ $1 == "info" ]; then
echo "i"
elif [ $1 == "delete" ]; then
echo "d"
elif [ $1 == "progress" ]; then
echo "p"
else
echo "$1 is not a valid command"
fi
&lt;/code>
&lt;/pre>
&lt;/section>
&lt;section>
&lt;h2>Inception&lt;/h2>
&lt;p>Try not giving a command. What happens?&lt;/p>
&lt;pre>
&lt;code class="language-plaintext" data-trim>
./part2test: line 3: [: ==: unary operator expected
./part2test: line 5: [: ==: unary operator expected
./part2test: line 7: [: ==: unary operator expected
./part2test: line 9: [: ==: unary operator expected
is not a valid command
&lt;/code>
&lt;/pre>
&lt;p>There is no such parameter, so bash gets confused&lt;/p>
&lt;pre class="fragment">
&lt;code class="language-bash" data-line-numbers="" data-trim>
if [ -n $1 ]; then
if [ $1 == "add" ]; then
echo "a"
elif [ $1 == "info" ]; then
echo "i"
elif [ $1 == "delete" ]; then
echo "d"
elif [ $1 == "progress" ]; then
echo "p"
else
echo "$1 is not a valid command"
fi
else
echo "No command given"
fi
&lt;/code>
&lt;/pre>
&lt;/section>
&lt;section>
&lt;h2>Switching It Up&lt;/h2>
&lt;p>If statements are nice, but a bit messy&lt;/p>
&lt;p>Switch cases fit our use a bit better&lt;/p>
&lt;pre class="fragment">
&lt;code class="language-bash" data-line-numbers="" data-trim>
if [ -n $1 ]; then
case $1 in
"add")
echo "a";;
"info")
echo "i";;
"delete")
echo "d";;
"progress")
echo "p";;
"*")
echo "$1 is not a valid command";;
esac
else
echo "No command given"
fi
&lt;/code>
&lt;/pre>
&lt;/section>
&lt;section>
&lt;h2>Everybody loves bash functions&lt;/h2>
&lt;p>We can write in the if statement, but that's messy&lt;/p>
&lt;pre class="fragment">
&lt;code class="language-bash" data-trim data-line-numbers="1-15|16-32">
add () {
echo "a";
}
info () {
echo "i";
}
delete () {
echo "d";
}
progress () {
echo "p";
}
if [ -n $1 ]; then
case $1 in
"add")
add ;;
"info")
info ;;
"delete")
delete ;;
"progress")
progress ;;
"*")
echo "$1 is not a valid command";;
esac
else
echo "No command given"
fi
&lt;/code>
&lt;/pre>
&lt;/section>
&lt;section>
&lt;h2>and their parameters&lt;/h2>
&lt;p>Let's pass parameters&lt;/p>
&lt;pre class="fragment">
&lt;code class="language-bash" data-trim data-line-numbers="1-15|16-32">
add () {
echo $1 $2 $3;
}
info () {
}
delete () {
echo $1;
}
progress () {
echo $1;
}
if [ -n $1 ]; then
case $1 in
"add")
add $2 $3 $4;;
"info")
info;;
"delete")
delete $2;;
"progress")
progress $2;;
"*")
echo "$1 is not a valid command";;
esac
else
echo "No command given"
fi
&lt;/code>
&lt;/pre>
&lt;/section>
&lt;section>
&lt;h1>Part 3: awk for fun and profit&lt;/h1>
&lt;/section>
&lt;section>
&lt;h2>Details 2: Electric Boogaloo&lt;/h2>
&lt;p>How should we store data?&lt;/p>
&lt;p class="fragment" data-fragment-index="1">CSV format&lt;/p>
&lt;p class="fragment" data-fragment-index="1">We need to store an id, a name, a due date, a category, and a state&lt;/p>
&lt;pre class="fragment" data-fragment-index="1">
&lt;code class="language-plaintext" data-trim data-line-numbers="">
1,Get Eggs,2021-12-02,shopping,todo
2,Get Milk,2021-12-02,shopping,pending
&lt;/code>
&lt;/pre>
&lt;p class="fragment" data-fragment-index="1">It'll be in a file in the current directory called todos.txt&lt;/p>
&lt;/section>
&lt;section>
&lt;h2>Redirects&lt;/h2>
&lt;p>When adding a task, we need to output to the file&lt;/p>
&lt;p>&lt;code>&amp;gt;&lt;/code> overwrites, &lt;code>&amp;gt;&amp;gt;&lt;/code> appends&lt;/p>
&lt;p>&lt;code>let&lt;/code> allows us to do math&lt;/p>
&lt;pre>
&lt;code class="language-bash" data-trim data-line-numbers="">
add () {
let taskid+=1
echo "$taskid,$1,$2,$3,todo" >> ./todos.txt
}
&lt;/code>
&lt;/pre>
&lt;p>taskid is the current highest taskid&lt;/p>
&lt;/section>
&lt;section>
&lt;h2>Intro to awk&lt;/h2>
&lt;p>awk is a row and column processor&lt;/p>
&lt;p>We can define actions to be taken on every row and column to filter, modify, and process them&lt;/p>
&lt;p>The basic format of an awk command is&lt;/p>
&lt;pre>
&lt;code class="language-plaintext" data-trim>
awk -F "separator" ' {action to perform on every row} file-to-act-on.extension'
&lt;/code>
&lt;/pre>
&lt;/section>
&lt;section>
&lt;h2>More awk&lt;/h2>
&lt;p>In awk, the action defined in the main braces is run on every row&lt;/p>
&lt;p>You can access each column with $1, $2, $3...&lt;/p>
&lt;p>&lt;code>print&lt;/code> will print to console&lt;/p>
&lt;/section>
&lt;section>
&lt;h2>A little more awk&lt;/h2>
&lt;p>You can pass variables with the &lt;code>-v&lt;/code> argument&lt;/p>
&lt;pre>
&lt;code class="language-plaintext" data-trim>
awk -v myvar=$1 '{ print myvar }'
&lt;/code>
&lt;/pre>
&lt;p>This prints the value of &lt;code>$1&lt;/code>, whatever it may be&lt;/p>
&lt;p>We can also write to a file by echoing awk's output and redirecting to a file&lt;/p>
&lt;pre>
&lt;code class="language-plaintext" data-trim>
echo "$(awk command)" > file
&lt;/code>
&lt;/pre>
&lt;p>&lt;code>$(command)&lt;/code> gets the output of executing said command&lt;/p>
&lt;/section>
&lt;section>
&lt;h2>info&lt;/h2>
&lt;p>How? &lt;span class="fragment" data-fragment-index="1">printf/formatted printing&lt;/code>&lt;/p>
&lt;p class="fragment" data-fragment-index="1">printf allows us to format input (%{space}{type})&lt;/p>
&lt;p class="fragment" data-fragment-index="1">It auto pads input&lt;/p>
&lt;pre class="fragment" data-fragment-index="2">
&lt;code class="language-bash" data-line-numbers="" data-trim>
info () {
echo "All tasks"
echo "$(awk -F "," '{printf("|%1s|%+15s|%12s|%11s|%10s|\n", $1, $2, $3, $4, $5)}' todos.txt)"
}
&lt;/code>
&lt;/pre>
&lt;/section>
&lt;section>
&lt;h2>delete&lt;/h2>
&lt;p>How? &lt;span class="fragment" data-fragment-index="1">Filter its id out&lt;/span>&lt;/p>
&lt;p class="fragment" data-fragment-index="1">&lt;code>'{ if (condition) { action } }'&lt;/code>&lt;/p>
&lt;pre class="fragment" data-fragment-index="2">
&lt;code class="language-bash" data-line-numbers="" data-trim>
delete () {
echo "$(awk -F "," -v taskid=$1 '{ if ($1 != taskid ) { print }}' todos.txt)" > ./todos.txt
}
&lt;/code>
&lt;/pre>
&lt;/section>
&lt;section>
&lt;h2>progress&lt;/h2>
&lt;p>How? &lt;span class="fragment" data-fragment-index="1">Filter by id, and change state based on current one&lt;/span>&lt;/p>
&lt;p class="fragment" data-fragment-index="1">&lt;code>'{ if ($1 == taskid) { if (state) {new state} }'&lt;/code>&lt;/p>
&lt;pre class="fragment" data-fragment-index="2">
&lt;code class="language-bash" data-line-numbers="" data-trim>
progress () {
echo "$(awk -F "," -v taskid=$1 '{ {OFS = FS} if ( $1 == taskid ) { \
if ($5 == "todo" ) {\
$5="pending" \
} else if ( $5 == "pending" ) {\
$5="done" }\
};\
print $0}' todos.txt)" > ./todos.txt
}
&lt;/code>
&lt;/pre>
&lt;p class="fragment" data-fragment-index="2">&lt;code>print $0&lt;/code> prints the whole line&lt;/p>
&lt;p class="fragment" data-fragment-index="2">&lt;code>{OFS = FS}&lt;/code> prints our separators&lt;/p>
&lt;/section>
&lt;section>
&lt;h2>Detective Work&lt;/h2>
&lt;p>Say we want to use another, older file&lt;/p>
&lt;pre>&lt;code class="language-bash">ksam@laptop:~/cliandyou/part3$ mv lotsoftodos.txt todos.txt&lt;/code>&lt;/pre>
&lt;p>If we run info, and scroll down, we see something strange&lt;/p>
&lt;pre>&lt;code class="language-plaintext">|nice| well| this is| weird.|2021-12-02|&lt;/code>&lt;/pre>
&lt;p>How can we easily inspect the file?&lt;/p>
&lt;/section>
&lt;section>
&lt;h2>Elementary, my dear Watson!&lt;/h2>
&lt;p>grep helps us search through a file to find occurrences of characters&lt;/p>
&lt;pre>&lt;code>ksam@laptop:~/cliandyou/part3$ grep -i nice lotsoftodos.txt&lt;/code>&lt;/pre>
&lt;/section>
&lt;section>
&lt;h1>Part 4: We're almost done I swear&lt;/h1>
&lt;/section>
&lt;section>
&lt;h2>Review&lt;/h2>
&lt;p>We've learned about bash scripting&lt;/p>
&lt;p>We've made a super simple todo app&lt;/p>
&lt;p>The CLI loves you&lt;/p>
&lt;/section>
&lt;section>
&lt;h2>Some practical snippets&lt;/h2>
&lt;pre>
&lt;code class="language-bash" data-trim data-line-numbers-"">
export HOST_IP="$(ip route |awk '/^default/{print $3}')"
&lt;/code>
&lt;/pre>
&lt;p class="fragment">Get the ip of the current system with awk&lt;/p>
&lt;pre>
&lt;code class="language-bash" data-trim data-line-numbers-"">
alias sd="sudo docker"
sd exec -it $(sd ps | awk 'NR == 2 { print $1 }') /bin/bash
&lt;/code>
&lt;/pre>
&lt;p class="fragment">Launch the nth running docker container&lt;/p>
&lt;/section>
&lt;section>
&lt;h2>Where do we go from here?&lt;/h2>
&lt;p>Look through more bash syntax&lt;/p>
&lt;p>Add other features&lt;/p>
&lt;p>Mess around on your own with the CLI&lt;/p>
&lt;/section>
&lt;section>
&lt;h1>Fin.&lt;/h1>
&lt;/section>
&lt;section data-visibility="uncounted">
&lt;p>Made with &lt;3 and Reveal.js&lt;/p>
&lt;p>By Kandasamy Chokkalingam&lt;/p>
&lt;/section>
&lt;/div>
&lt;/div>
&lt;script src="https://www.kandasamyc.com/js/pres/cliandyou/reveal.js">&lt;/script>
&lt;script src="https://www.kandasamyc.com/js/pres/cliandyou/plugin/notes/notes.js">&lt;/script>
&lt;script src="https://www.kandasamyc.com/js/pres/cliandyou/plugin/search/search.js">&lt;/script>
&lt;script src="https://www.kandasamyc.com/js/pres/cliandyou/plugin/highlight/highlight.js">&lt;/script>
&lt;script>
// Also available as an ES module, see:
// https://revealjs.com/initialization/
Reveal.initialize({
controls: false,
progress: true,
center: true,
hash: true,
// Learn about plugins: https://revealjs.com/plugins/
plugins: [ RevealNotes, RevealSearch, RevealHighlight ]
});
&lt;/script>
&lt;style>
.reveal > .slides > section > section {
transform-style: flat;
}
&lt;/style>
&lt;/body>
&lt;/html></content></item><item><title/><link>https://www.kandasamyc.com/pres/frc/backend-one/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.kandasamyc.com/pres/frc/backend-one/</guid><description>&lt;!DOCTYPE html> Python Quickstart Python Quickstart I speedrun the basics Part 1: Theory Variables, Conditionals, Loops robot_name = "Kestrel" robot_weight = 120 robot_speed = 5 robot_balance_momentum = 1000 robot_subsystems = ["drivetrain","shooter","intake","feeder","climber"] print(robot_name) if robot_weight > 120: print("Robot is too heavy!") if robot_speed > 5 and robot_weight * robot_speed > robot_balance_momentum: print("Robot may tip!") for subsystem in robot_subsystems: print(f"{robot_name} has subsystem {subsystem}") Functions robot_name = "Kestrel" robot_weight = 120 robot_speed = 5 robot_balance_momentum = 1000 robot_subsystems = ["</description><content>&lt;!DOCTYPE html>
&lt;html lang="en">
&lt;head>
&lt;meta charset="utf-8" />
&lt;title>Python Quickstart&lt;/title>
&lt;meta name="description" content="A light intro to graphic design" />
&lt;meta name="author" content="Kandasamy Chokkalingam" />
&lt;meta name="apple-mobile-web-app-capable" content="yes" />
&lt;meta
name="apple-mobile-web-app-status-bar-style"
content="black-translucent"
/>
&lt;meta name="viewport" content="width=device-width, initial-scale=1.0" />
&lt;link rel="stylesheet" href="https://rsms.me/inter/inter.css" />
&lt;link
rel="stylesheet"
href="https://cdn.jsdelivr.net/gh/aymanbagabas/iosevka-fonts/dist/iosevka/iosevka.min.css"
/>
&lt;link rel="stylesheet" href="https://www.kandasamyc.com/css/pres/frc/reset.css" />
&lt;link rel="stylesheet" href="https://www.kandasamyc.com/css/pres/frc/reveal.css" />
&lt;link rel="stylesheet" href="https://www.kandasamyc.com/css/pres/frc/ksam.css" id="theme" />
&lt;!-- Theme used for syntax highlighting of code -->
&lt;link
rel="stylesheet"
href="https://www.kandasamyc.com/js/pres/frc/plugin/highlight/atom-one-dark.css"
/>
&lt;/head>
&lt;body>
&lt;div class="reveal">
&lt;!-- Any section element inside of this container is displayed as a slide -->
&lt;div class="slides">
&lt;section>
&lt;h1>Python Quickstart&lt;/h1>
&lt;h3>I speedrun the basics&lt;/h3>
&lt;/section>
&lt;section>
&lt;h1>Part 1: Theory&lt;/h1>
&lt;/section>
&lt;section>
&lt;h2>Variables, Conditionals, Loops&lt;/h2>
&lt;pre>
&lt;code class="language-python" data-trim data-line-numbers="1-5|8|11|14-15|">
robot_name = "Kestrel"
robot_weight = 120
robot_speed = 5
robot_balance_momentum = 1000
robot_subsystems = ["drivetrain","shooter","intake","feeder","climber"]
print(robot_name)
if robot_weight > 120:
print("Robot is too heavy!")
if robot_speed > 5 and robot_weight * robot_speed > robot_balance_momentum:
print("Robot may tip!")
for subsystem in robot_subsystems:
print(f"{robot_name} has subsystem {subsystem}")
&lt;/code>
&lt;/pre>
&lt;/section>
&lt;section>
&lt;h2>Functions&lt;/h2>
&lt;pre>
&lt;code class="language-python" data-trim data-line-numbers="7|8-16|">
robot_name = "Kestrel"
robot_weight = 120
robot_speed = 5
robot_balance_momentum = 1000
robot_subsystems = ["drivetrain","shooter","intake","feeder","climber"]
def robot_info(name, speed, balance_momentum, subsystems, weight=120):
print(name)
if weight > 120:
print("Robot is too heavy!")
if speed > 5 and weight * speed > balance_momentum:
print("Robot may tip!")
for subsystem in subsystems:
print(f"{name} has subsystem {subsystem}")
robot_info(robot_name, robot_speed, robot_balance_momentum, robot_subsystems, weight=robot_weight)
&lt;/code>
&lt;/pre>
&lt;/section>
&lt;section>
&lt;h2>Classes&lt;/h2>
&lt;pre>
&lt;code data-trim data-line-numbers="1|3|4-8|10|21|">
class Robot:
def __init__(self, name, balance_momentum, subsystems, speed=0, weight=120):
self.name = name
self.balance_momentum = balance_momentum
self.subsystems = subsystems
self.speed = speed
self.weight = weight
def robot_info(self):
print(name)
if weight > 120:
print("Robot is too heavy!")
if speed > 5 and weight * speed > balance_momentum:
print("Robot may tip!")
for subsystem in subsystems:
print(f"{name} has subsystem {subsystem}")
kestrel = Robot("kestrel", 1000, ["drivetrain","shooter","intake","feeder","climber"])
&lt;/code>
&lt;/pre>
&lt;/section>
&lt;section>
&lt;h2>Static Methods, List Comprehensions, Slicing&lt;/h2>
&lt;pre>
&lt;code data-trim data-line-numbers="4|5|11|13|14|">
class Robot:
...
@staticmethod
def print_subsystems(subsystems):
for idx, subsystem in enumerate(subsystems):
print(f"Subsystem {idx}: {subsystem}")
@staticmethod
def format_subsystems(subsystems):
return [f"Subsystem {subsystem[:3]}: {subsystem}" for subsystem in subsystems]
Robot.print_subsystems(["drivetrain","shooter","intake","feeder","climber"])
print(Robot.format_subsystems(["drivetrain","shooter","intake","feeder","climber"]))
&lt;/code>
&lt;/pre>
&lt;/section>
&lt;section>
&lt;h2>Formatting, Docstrings, Multiline Strings&lt;/h2>
&lt;pre>
&lt;code data-trim data-line-numbers="2-5|8-13|14|15|23-32|44-46|">
class Robot:
"""
A class that represents a generic FRC robot. This class provides an interface
to store data about robot as well compute properties from its base fields
"""
def __init__(
self,
name: str,
balance_momentum: int,
subsystems: List[str],
speed: Optional[int] = 0,
weight: Optional[int] = 120,
) -> None:
"""A constructor"""
self.name = name
self.balance_momentum = balance_momentum
self.subsystems = subsystems
self.speed = speed
self.weight = weight
def robot_info(self, weight_limit) -> None:
"""
Checks to see if robot is under weight limit,
robot is not tippy, and prints out all subsystems.
Parameters:
weight_limit: Threshold to compare Robot weight against
Returns:
Nothing
"""
print(name)
if weight > weight_limit:
print("Robot is too heavy!")
if speed > 5 and weight * speed > balance_momentum:
print("Robot may tip!")
for subsystem in subsystems:
print(f"{name} has subsystem {subsystem}")
kestrel = Robot(
"kestrel", 1000, ["drivetrain", "shooter", "intake", "feeder", "climber"]
)
&lt;/code>
&lt;/pre>
&lt;/section>
&lt;section>
&lt;h1>Part 2: Practice&lt;/h1>
&lt;/section>
&lt;section>
&lt;p>Design a Drivetrain class&lt;/p>
&lt;p>Fields: Number of Wheels, Type of Drivetrain, Max Force, Current Speed, Distance Traveled&lt;/p>
&lt;p>Methods: constructor, add_wheel, race, move, is_valid_drivetrain_type&lt;/p>
&lt;p>Add comments and type hint&lt;/p>
&lt;p>If you still have time, make the code as bad as possible&lt;/p>
&lt;/section>
&lt;section>
&lt;h2>Method Specifications&lt;/h2>
&lt;p>The constructor should check if the type of drivetrain is valid "swerve" or "tank"&lt;/p>
&lt;p>add_wheel(self)->None, should increment the numbers of wheels&lt;/p>
&lt;p>race(self,other: Drivetrain)->Boolean, whether this drivetrain would beat the other in a race&lt;/p>
&lt;p>is_valid_drivetrain_type(dt_type: str)->Boolean, whether this is valid&lt;/p>
&lt;p>move(self, time:int) -> increment distance traveled by moving at current speed for given amount of time&lt;/p>
&lt;/section>
&lt;section>
&lt;h1>Fin.&lt;/h1>
&lt;/section>
&lt;section data-visibility="uncounted">
&lt;p>Made with &lt;3 and Reveal.js&lt;/p>
&lt;p>By ksam&lt;/p>
&lt;p>With help from &lt;/p>
&lt;/section>
&lt;/div>
&lt;/div>
&lt;script src="https://www.kandasamyc.com/js/pres/frc/reveal.js">&lt;/script>
&lt;script src="https://www.kandasamyc.com/js/pres/frc/plugin/notes/notes.js">&lt;/script>
&lt;script src="https://www.kandasamyc.com/js/pres/frc/plugin/search/search.js">&lt;/script>
&lt;script src="https://www.kandasamyc.com/js/pres/frc/plugin/highlight/highlight.js">&lt;/script>
&lt;script>
// Also available as an ES module, see:
// https://revealjs.com/initialization/
Reveal.initialize({
controls: false,
progress: true,
center: true,
hash: true,
// Learn about plugins: https://revealjs.com/plugins/
plugins: [RevealNotes, RevealSearch, RevealHighlight],
});
&lt;/script>
&lt;style>
.reveal > .slides > section > section {
transform-style: flat;
}
&lt;/style>
&lt;/body>
&lt;/html></content></item><item><title/><link>https://www.kandasamyc.com/pres/frc/design-one/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.kandasamyc.com/pres/frc/design-one/</guid><description>&lt;!doctype html> Graphic Design Workshop 1 Graphic Design 101 An Intro to Design Disclaimer There are far better resources and people to learn about this.
This is mostly things I've picked up, and should be taken with a grain of salt.
Context Graphic Design is a massive, rapidly changing field
Some things will be general, but I'm mostly trying to target our uses
Overview Design Principles Design Process Practice Other things to keep in mind Part 1: Design Principles Functionality Aesthetics mean nothing if your design cannot function</description><content>&lt;!doctype html>
&lt;html lang="en">
&lt;head>
&lt;meta charset="utf-8">
&lt;title>Graphic Design Workshop 1&lt;/title>
&lt;meta name="description" content="A light intro to graphic design">
&lt;meta name="author" content="Kandasamy Chokkalingam">
&lt;meta name="apple-mobile-web-app-capable" content="yes">
&lt;meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
&lt;meta name="viewport" content="width=device-width, initial-scale=1.0">
&lt;link rel="stylesheet" href="https://rsms.me/inter/inter.css">
&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/aymanbagabas/iosevka-fonts/dist/iosevka/iosevka.min.css">
&lt;link rel="stylesheet" href="https://www.kandasamyc.com/css/pres/frc/reset.css">
&lt;link rel="stylesheet" href="https://www.kandasamyc.com/css/pres/frc/reveal.css">
&lt;link rel="stylesheet" href="https://www.kandasamyc.com/css/pres/frc/ksam.css" id="theme">
&lt;!-- Theme used for syntax highlighting of code -->
&lt;link rel="stylesheet" href="https://www.kandasamyc.com/js/pres/frc/plugin/highlight/atom-one-dark.css">
&lt;/head>
&lt;body>
&lt;div class="reveal">
&lt;!-- Any section element inside of this container is displayed as a slide -->
&lt;div class="slides">
&lt;section>
&lt;h1>Graphic Design 101&lt;/h1>
&lt;h3>An Intro to Design&lt;/h3>
&lt;/section>
&lt;section>
&lt;h2>Disclaimer&lt;/h2>
&lt;p>There are far better resources and people to learn about this.&lt;/p>
&lt;p>This is mostly things I've picked up, and should be taken with a grain of salt.&lt;/p>
&lt;/section>
&lt;section>
&lt;h2>Context&lt;/h2>
&lt;p>Graphic Design is a massive, rapidly changing field&lt;/p>
&lt;p>Some things will be general, but I'm mostly trying to target our uses&lt;/p>
&lt;/section>
&lt;section>
&lt;h2>Overview&lt;/h2>
&lt;ul>
&lt;li>Design Principles&lt;/li>
&lt;li>Design Process&lt;/li>
&lt;li>Practice&lt;/li>
&lt;li>Other things to keep in mind&lt;/li>
&lt;/ul>
&lt;/section>
&lt;section>
&lt;h1>Part 1: Design Principles&lt;/h1>
&lt;/section>
&lt;section>
&lt;h2>Functionality&lt;/h2>
&lt;p>Aesthetics mean nothing if your design cannot function&lt;/p>
&lt;p>Be clear on your requirements before you start designing&lt;/p>
&lt;img class="fragment" src="https://static.boredpanda.com/blog/wp-content/uploads/2018/06/funny-worst-input-fields-35-5b235c71c6c84__700.gif" width="250px">&lt;/img>
&lt;/section>
&lt;section>
&lt;h2>Simplicity&lt;/h2>
&lt;p>Get &lt;b>your message&lt;/b> across as simply as possible&lt;/p>
&lt;p>This doesn't mean complex designs are bad&lt;/p>
&lt;img class="fragment" src="https://static.boredpanda.com/blog/wp-content/uploads/2018/06/funny-worst-input-fields-48-5b2366d788af3__700.gif" width="250px">&lt;/img>
&lt;/section>
&lt;section>
&lt;h2>Usability&lt;/h2>
&lt;p>Use of the design should be intuitive&lt;/p>
&lt;p>The less training required &amp;#8212; the better&lt;/p>
&lt;img class="fragment" src="https://static.boredpanda.com/blog/wp-content/uploads/2018/06/funny-worst-input-fields-11-5b235c170ebee__700.gif" width="250px">&lt;/img>
&lt;/section>
&lt;section>
&lt;h2>Flow&lt;/h2>
&lt;p>At first sight, your design should logically flow&lt;/p>
&lt;p>It should be clear which section comes after which&lt;/p>
&lt;img class="fragment" src="https://www.kandasamyc.com/img/pres/frc/design-one/flow-general.png" width="350px">&lt;/img>
&lt;/section>
&lt;section>
&lt;h2>Flow: Alignment&lt;/h2>
&lt;p>Keeping elements anchored to similar lines/items keeps your design grounded&lt;/p>
&lt;p>This provides some organization&lt;/p>
&lt;img class="fragment" src="https://www.kandasamyc.com/img/pres/frc/design-one/flow-alignment.png" width="350px">&lt;/img>
&lt;/section>
&lt;section>
&lt;h2>Flow: Hierarchy&lt;/h2>
&lt;p>Logically grouping items sections them off without explicit instruction&lt;/p>
&lt;p>Demonstrates the level of relative importance&lt;/p>
&lt;img class="fragment" src="https://www.kandasamyc.com/img/pres/frc/design-one/flow-hierarchy.png" width="350px">&lt;/img>
&lt;/section>
&lt;section>
&lt;h2>Flow: Balance&lt;/h2>
&lt;p>Elements should be distributed to prevent an overuse of one area&lt;/p>
&lt;p>Don't be afraid of whitespace between elements&lt;/p>
&lt;img class="fragment" src="https://www.kandasamyc.com/img/pres/frc/design-one/flow-balance.png" width="350px">&lt;/img>
&lt;/section>
&lt;section>
&lt;h2>Coherence&lt;/h2>
&lt;p>The elements in your design should work together&lt;/p>
&lt;p>They can be unique, but still appear grounded in a general theme&lt;/p>
&lt;img class="fragment" src="https://www.kandasamyc.com/img/pres/frc/design-one/coherence-general.png" width="350px">&lt;/img>
&lt;/section>
&lt;section>
&lt;h2>Coherence: Theme&lt;/h2>
&lt;p>Pick a theme for your design and stick with it&lt;/p>
&lt;p>This theme should be appropriate for your goals/message&lt;/p>
&lt;img class="fragment" src="https://www.kandasamyc.com/img/pres/frc/design-one/coherence-theme.png" width="350px">&lt;/img>
&lt;/section>
&lt;section>
&lt;h2>Coherence: Repetition&lt;/h2>
&lt;p>Repeat certain aspects of elements in multiple places in your design&lt;/p>
&lt;p>This implicitly groups different elements, as long as your don't overdo it&lt;/p>
&lt;img class="fragment" src="https://www.kandasamyc.com/img/pres/frc/design-one/coherence-repetition.png" width="350px">&lt;/img>
&lt;/section>
&lt;section>
&lt;h2>Coherence: Modularity&lt;/h2>
&lt;p>Design elements to compose of other elements as much as possible&lt;/p>
&lt;p>This will keep your designing simple and inherently coherent&lt;/p>
&lt;/section>
&lt;section>
&lt;h2>Aesthetic&lt;/h2>
&lt;p>Your design should, put simply, look good&lt;/p>
&lt;p>While there are a range of tastes/looks, looking "good" has some general guidelines&lt;/p>
&lt;img class="fragment" src="https://www.kandasamyc.com/img/pres/frc/design-one/aesthetic-general.png" width="350px">&lt;/img>
&lt;/section>
&lt;section>
&lt;h2>Aesthetic: Color&lt;/h2>
&lt;p>Pick a primary color and a secondary color that complement each other and go from there&lt;/p>
&lt;p>Pick colors that highlight your message while still differing from each other&lt;/p>
&lt;img class="fragment" src="https://www.kandasamyc.com/img/pres/frc/design-one/aesthetic-color.png" width="350px">&lt;/img>
&lt;/section>
&lt;section>
&lt;h2>Aesthetic: Type&lt;/h2>
&lt;p>Pick a main font that is simple and easily readable&lt;/p>
&lt;p>Pick a heading/display font that fits your theme more and use this less&lt;/p>
&lt;img class="fragment" src="https://www.kandasamyc.com/img/pres/frc/design-one/aesthetic-type.png" width="350px">&lt;/img>
&lt;/section>
&lt;section>
&lt;h2>Aesthetic: Expression&lt;/h2>
&lt;p>Design your elements with your theme in mind&lt;/p>
&lt;p>A more neutral theme should have simpler element, and vice versa&lt;/p>
&lt;img class="fragment" src="https://www.kandasamyc.com/img/pres/frc/design-one/aesthetic-expression.png" width="350px">&lt;/img>
&lt;/section>
&lt;section>
&lt;h2>Breaking Rules&lt;/h2>
&lt;blockquote cite="George Orwell">
&lt;ol>
&lt;li> Never use a metaphor, simile, or other figure of speech which you are used to seeing in print.&lt;/li>
&lt;li>Never use a long word where a short one will do.&lt;/li>
&lt;li>If it is possible to cut a word out, always cut it out.&lt;/li>
&lt;li>Never use the passive where you can use the active.&lt;/li>
&lt;li>Never use a foreign phrase, a scientific word, or a jargon word if you can think of an everyday English equivalent.&lt;/li>
&lt;li>Break any of these rules sooner than say anything outright barbarous.&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>George Orwell&lt;/p>
&lt;/section>
&lt;section>
&lt;h2>Part 2: Design Process&lt;/h2>
&lt;/section>
&lt;section>
&lt;h2>1. Formalize Your Message and Goals&lt;/h2>
&lt;p>What do you want to convey?&lt;/p>
&lt;p>What is the overarching goal of your design?&lt;/p>
&lt;/section>
&lt;section>
&lt;h2>2. Pick a Theme&lt;/h2>
&lt;p>What should your overall design look like?&lt;/p>
&lt;p>This should reflect and support your message/goals&lt;/p>
&lt;/section>
&lt;section>
&lt;h2>3. Determine the User Experience&lt;/h2>
&lt;p>List everything you want the user to be able to do&lt;/p>
&lt;p>Don't consider specific design now, just things the user wants&lt;/p>
&lt;/section>
&lt;section>
&lt;h2>4. Specify Your Requirements&lt;/h2>
&lt;p>What are the requirements you, as the designer, are following?&lt;/p>
&lt;p>Do you have any limitations, constraints, or other needs that don't directly concern the user?&lt;/p>
&lt;/section>
&lt;section>
&lt;h2>5. Outline Your Elements&lt;/h2>
&lt;p>Create a rough outline of what elements you'll have and how they are organized&lt;/p>
&lt;p>The main point of this is to get an idea of what elements you need to start with&lt;/p>
&lt;/section>
&lt;section>
&lt;h2>6. Iterate on Your Elements&lt;/h2>
&lt;p>Design them, focusing on meeting the requirements and the UX for each specific element&lt;/p>
&lt;p>Refine repeatedly, following design principles&lt;/p>
&lt;/section>
&lt;section>
&lt;h2>7. Ensure Coherence and Flow&lt;/h2>
&lt;p>Put the elements together and see how they work together&lt;/p>
&lt;p>Fix any issues with flow or coherence and iterate&lt;/p>
&lt;/section>
&lt;section>
&lt;h2>8. Test&lt;/h2>
&lt;p>Get fresh eyes to look it over and find pain points that you might not see&lt;/p>
&lt;p>You want to understand how someone who knows nothing about your design interacts with it&lt;/p>
&lt;/section>
&lt;section>
&lt;h2>9. Repeat 6-8&lt;/h2>
&lt;p>Keep going until you find a design both you and your users are happy with&lt;/p>
&lt;p>This could take a while, but you don't need perfection&lt;/p>
&lt;/section>
&lt;section>
&lt;h2>10. Profit&lt;/h2>
&lt;/section>
&lt;section>
&lt;h2>Part 3: Practice&lt;/h2>
&lt;/section>
&lt;section>
&lt;h2>Dog Adoption Form&lt;/h2>
&lt;p>One page only&lt;/p>
&lt;p>Should have all the info required to pick a dog to adopt&lt;/p>
&lt;p>Should collect all the adopter's information&lt;/p>
&lt;p>Should provide a convincing case to adopt each dog&lt;/p>
&lt;p>Run by a newer clinic that focuses on puppies and targets a younger audience (12-25)&lt;/p>
&lt;/section>
&lt;section>
&lt;h2>Part 4: A Few More Things&lt;/h2>
&lt;/section>
&lt;section>
&lt;h2>Fonts&lt;/h2>
&lt;p>Make sure you check the license of the font you're using&lt;/p>
&lt;p>Google Fonts is a great place to get freely useable fonts&lt;/p>
&lt;p>Other good freely useable fonts are Inter, Manope, Iosevka&lt;/p>
&lt;/section>
&lt;section>
&lt;h2>Colors and Contrast&lt;/h2>
&lt;p>When picking colors, ensure that the contrast between them is sufficient enough&lt;/p>
&lt;p>Use something like &lt;a href="https://coolors.co/contrast-checker">coolors' constrast checker&lt;/a>&lt;/p>
&lt;/section>
&lt;section>
&lt;h2>What now?&lt;/h2>
&lt;p>Graphic Design is something that takes practice to learn&lt;/p>
&lt;img src="https://i.redd.it/gysdnhzo5pd61.jpg" width="500px">&lt;/img>
&lt;/section>
&lt;section>
&lt;h1>Fin.&lt;/h1>
&lt;/section>
&lt;section data-visibility="uncounted">
&lt;p>Made with &lt;3 and Reveal.js&lt;/p>
&lt;p>By ksam&lt;/p>
&lt;p>With help from &lt;/p>
&lt;/section>
&lt;/div>
&lt;/div>
&lt;script src="https://www.kandasamyc.com/js/pres/frc/reveal.js">&lt;/script>
&lt;script src="https://www.kandasamyc.com/js/pres/frc/plugin/notes/notes.js">&lt;/script>
&lt;script src="https://www.kandasamyc.com/js/pres/frc/plugin/search/search.js">&lt;/script>
&lt;script src="https://www.kandasamyc.com/js/pres/frc/plugin/highlight/highlight.js">&lt;/script>
&lt;script>
// Also available as an ES module, see:
// https://revealjs.com/initialization/
Reveal.initialize({
controls: false,
progress: true,
center: true,
hash: true,
// Learn about plugins: https://revealjs.com/plugins/
plugins: [ RevealNotes, RevealSearch, RevealHighlight ]
});
&lt;/script>
&lt;style>
.reveal > .slides > section > section {
transform-style: flat;
}
&lt;/style>
&lt;/body>
&lt;/html></content></item><item><title/><link>https://www.kandasamyc.com/pres/frc/frontend-one/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.kandasamyc.com/pres/frc/frontend-one/</guid><description>&lt;!DOCTYPE html> An Intro to Web Development HTML, CSS, and JS The Magic Number Overview We're going to be building a simple one-page store
We'll start with the HTML basics, move on to styling with CSS, and finally adding some functionality
You can find a github link here
Feel free to follow along or just watch
Made with &lt;3 and Reveal.js
By ksam</description><content>&lt;!DOCTYPE html>
&lt;html lang="en">
&lt;head>
&lt;meta charset="utf-8" />
&lt;title>An Intro to Web Development&lt;/title>
&lt;meta name="description" content="A light intro to graphic design" />
&lt;meta name="author" content="Kandasamy Chokkalingam" />
&lt;meta name="apple-mobile-web-app-capable" content="yes" />
&lt;meta
name="apple-mobile-web-app-status-bar-style"
content="black-translucent"
/>
&lt;meta name="viewport" content="width=device-width, initial-scale=1.0" />
&lt;link rel="stylesheet" href="https://rsms.me/inter/inter.css" />
&lt;link
rel="stylesheet"
href="https://cdn.jsdelivr.net/gh/aymanbagabas/iosevka-fonts/dist/iosevka/iosevka.min.css"
/>
&lt;link rel="stylesheet" href="https://www.kandasamyc.com/css/pres/frc/reset.css" />
&lt;link rel="stylesheet" href="https://www.kandasamyc.com/css/pres/frc/reveal.css" />
&lt;link rel="stylesheet" href="https://www.kandasamyc.com/css/pres/frc/ksam.css" id="theme" />
&lt;!-- Theme used for syntax highlighting of code -->
&lt;link
rel="stylesheet"
href="https://www.kandasamyc.com/js/pres/frc/plugin/highlight/atom-one-dark.css"
/>
&lt;/head>
&lt;body>
&lt;div class="reveal">
&lt;!-- Any section element inside of this container is displayed as a slide -->
&lt;div class="slides">
&lt;section>
&lt;h1>HTML, CSS, and JS&lt;/h1>
&lt;h3>&lt;a href="https://www.youtube.com/watch?v=np0YIaHv6LQ">The Magic Number&lt;/a>&lt;/h3>
&lt;/section>
&lt;section>
&lt;h1>Overview&lt;/h1>
&lt;p>We're going to be building a simple one-page store&lt;/p>
&lt;p>We'll start with the HTML basics, move on to styling with CSS, and finally adding some functionality&lt;/p>
&lt;p>You can find a github link here&lt;/p>
&lt;p>Feel free to follow along or just watch&lt;/p>
&lt;/section>
&lt;section data-visibility="uncounted">
&lt;p>Made with &lt;3 and Reveal.js&lt;/p>
&lt;p>By ksam&lt;/p>
&lt;/section>
&lt;/div>
&lt;/div>
&lt;script src="https://www.kandasamyc.com/js/pres/frc/reveal.js">&lt;/script>
&lt;script src="https://www.kandasamyc.com/js/pres/frc/plugin/notes/notes.js">&lt;/script>
&lt;script src="https://www.kandasamyc.com/js/pres/frc/plugin/search/search.js">&lt;/script>
&lt;script src="https://www.kandasamyc.com/js/pres/frc/plugin/highlight/highlight.js">&lt;/script>
&lt;script>
// Also available as an ES module, see:
// https://revealjs.com/initialization/
Reveal.initialize({
controls: false,
progress: true,
center: true,
hash: true,
// Learn about plugins: https://revealjs.com/plugins/
plugins: [RevealNotes, RevealSearch, RevealHighlight],
});
&lt;/script>
&lt;style>
.reveal > .slides > section > section {
transform-style: flat;
}
&lt;/style>
&lt;/body>
&lt;/html></content></item><item><title/><link>https://www.kandasamyc.com/pres/frc/notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.kandasamyc.com/pres/frc/notes/</guid><description/><content/></item><item><title/><link>https://www.kandasamyc.com/pres/frc/visualizations-one/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.kandasamyc.com/pres/frc/visualizations-one/</guid><description>&lt;!DOCTYPE html> Intro to Visualizations Intro to Visualizations I am about to ramble for an hour Overview Part 1: Theory Part 2: Data Part 3: Color Part 4: Types Part 5: Examples Part 1: Theory Variables, Conditionals, Loops robot_name = "Kestrel" robot_weight = 120 robot_speed = 5 robot_balance_momentum = 1000 robot_subsystems = ["drivetrain","shooter","intake","feeder","climber"] print(robot_name) if robot_weight > 120: print("Robot is too heavy!") if robot_speed > 5 and robot_weight * robot_speed > robot_balance_momentum: print("</description><content>&lt;!DOCTYPE html>
&lt;html lang="en">
&lt;head>
&lt;meta charset="utf-8" />
&lt;title>Intro to Visualizations&lt;/title>
&lt;meta name="description" content="A light intro to graphic design" />
&lt;meta name="author" content="Kandasamy Chokkalingam" />
&lt;meta name="apple-mobile-web-app-capable" content="yes" />
&lt;meta
name="apple-mobile-web-app-status-bar-style"
content="black-translucent"
/>
&lt;meta name="viewport" content="width=device-width, initial-scale=1.0" />
&lt;link rel="stylesheet" href="https://rsms.me/inter/inter.css" />
&lt;link
rel="stylesheet"
href="https://cdn.jsdelivr.net/gh/aymanbagabas/iosevka-fonts/dist/iosevka/iosevka.min.css"
/>
&lt;link rel="stylesheet" href="https://www.kandasamyc.com/css/pres/frc/reset.css" />
&lt;link rel="stylesheet" href="https://www.kandasamyc.com/css/pres/frc/reveal.css" />
&lt;link rel="stylesheet" href="https://www.kandasamyc.com/css/pres/frc/ksam.css" id="theme" />
&lt;!-- Theme used for syntax highlighting of code -->
&lt;link
rel="stylesheet"
href="https://www.kandasamyc.com/js/pres/frc/plugin/highlight/atom-one-dark.css"
/>
&lt;/head>
&lt;body>
&lt;div class="reveal">
&lt;!-- Any section element inside of this container is displayed as a slide -->
&lt;div class="slides">
&lt;section>
&lt;h1>Intro to Visualizations&lt;/h1>
&lt;h3>I am about to ramble for an hour&lt;/h3>
&lt;/section>
&lt;section>
&lt;h1>Overview&lt;/h1>
&lt;ul>
&lt;li>Part 1: Theory&lt;/li>
&lt;li>Part 2: Data&lt;/li>
&lt;li>Part 3: Color&lt;/li>
&lt;li>Part 4: Types&lt;/li>
&lt;li>Part 5: Examples&lt;/li>
&lt;/ul>
&lt;/section>
&lt;section>
&lt;h1>Part 1: Theory&lt;/h1>
&lt;/section>
&lt;section>
&lt;h2>Variables, Conditionals, Loops&lt;/h2>
&lt;pre>
&lt;code class="language-python" data-trim data-line-numbers="1-5|8|11|14-15|">
robot_name = "Kestrel"
robot_weight = 120
robot_speed = 5
robot_balance_momentum = 1000
robot_subsystems = ["drivetrain","shooter","intake","feeder","climber"]
print(robot_name)
if robot_weight > 120:
print("Robot is too heavy!")
if robot_speed > 5 and robot_weight * robot_speed > robot_balance_momentum:
print("Robot may tip!")
for subsystem in robot_subsystems:
print(f"{robot_name} has subsystem {subsystem}")
&lt;/code>
&lt;/pre>
&lt;/section>
&lt;section>
&lt;h2>Functions&lt;/h2>
&lt;pre>
&lt;code class="language-python" data-trim data-line-numbers="7|8-16|">
robot_name = "Kestrel"
robot_weight = 120
robot_speed = 5
robot_balance_momentum = 1000
robot_subsystems = ["drivetrain","shooter","intake","feeder","climber"]
def robot_info(name, speed, balance_momentum, subsystems, weight=120):
print(name)
if weight > 120:
print("Robot is too heavy!")
if speed > 5 and weight * speed > balance_momentum:
print("Robot may tip!")
for subsystem in subsystems:
print(f"{name} has subsystem {subsystem}")
robot_info(robot_name, robot_speed, robot_balance_momentum, robot_subsystems, weight=robot_weight)
&lt;/code>
&lt;/pre>
&lt;/section>
&lt;section>
&lt;h2>Classes&lt;/h2>
&lt;pre>
&lt;code data-trim data-line-numbers="1|3|4-8|10|21|">
class Robot:
def __init__(self, name, balance_momentum, subsystems, speed=0, weight=120):
self.name = name
self.balance_momentum = balance_momentum
self.subsystems = subsystems
self.speed = speed
self.weight = weight
def robot_info(self):
print(name)
if weight > 120:
print("Robot is too heavy!")
if speed > 5 and weight * speed > balance_momentum:
print("Robot may tip!")
for subsystem in subsystems:
print(f"{name} has subsystem {subsystem}")
kestrel = Robot("kestrel", 1000, ["drivetrain","shooter","intake","feeder","climber"])
&lt;/code>
&lt;/pre>
&lt;/section>
&lt;section>
&lt;h2>Static Methods, List Comprehensions, Slicing&lt;/h2>
&lt;pre>
&lt;code data-trim data-line-numbers="4|5|11|13|14|">
class Robot:
...
@staticmethod
def print_subsystems(subsystems):
for idx, subsystem in enumerate(subsystems):
print(f"Subsystem {idx}: {subsystem}")
@staticmethod
def format_subsystems(subsystems):
return [f"Subsystem {subsystem[:3]}: {subsystem}" for subsystem in subsystems]
Robot.print_subsystems(["drivetrain","shooter","intake","feeder","climber"])
print(Robot.format_subsystems(["drivetrain","shooter","intake","feeder","climber"]))
&lt;/code>
&lt;/pre>
&lt;/section>
&lt;section>
&lt;h2>Formatting, Docstrings, Multiline Strings&lt;/h2>
&lt;pre>
&lt;code data-trim data-line-numbers="2-5|8-13|14|15|34-36|">
class Robot:
"""
A class that represents a generic FRC robot. This class provides an interface
to store data about robot as well compute properties from its base fields
"""
def __init__(
self,
name: str,
balance_momentum: int,
subsystems: List[str],
speed: Optional[int] = 0,
weight: Optional[int] = 120,
) -> None:
"""A constructor"""
self.name = name
self.balance_momentum = balance_momentum
self.subsystems = subsystems
self.speed = speed
self.weight = weight
def robot_info(self) -> None:
print(name)
if weight > 120:
print("Robot is too heavy!")
if speed > 5 and weight * speed > balance_momentum:
print("Robot may tip!")
for subsystem in subsystems:
print(f"{name} has subsystem {subsystem}")
kestrel = Robot(
"kestrel", 1000, ["drivetrain", "shooter", "intake", "feeder", "climber"]
)
&lt;/code>
&lt;/pre>
&lt;/section>
&lt;section>
&lt;h1>Part 2: Practice&lt;/h1>
&lt;/section>
&lt;section>
&lt;p>Design a Drivetrain class&lt;/p>
&lt;p>Fields: Number of Wheels, Type of Drivetrain, Max Force, Current Speed, Distance Traveled&lt;/p>
&lt;p>Methods: constructor, add_wheel, race, move, is_valid_drivetrain_type&lt;/p>
&lt;p>Add comments and type hint&lt;/p>
&lt;p>If you still have time, make the code as bad as possible&lt;/p>
&lt;/section>
&lt;section>
&lt;h2>Method Specifications&lt;/h2>
&lt;p>The constructor should check if the type of drivetrain is valid "swerve" or "tank"&lt;/p>
&lt;p>add_wheel(self)->None, should increment the numbers of wheels&lt;/p>
&lt;p>race(self,other: Drivetrain)->Boolean, whether this drivetrain would beat the other in a race&lt;/p>
&lt;p>is_valid_drivetrain_type(dt_type: str)->Boolean, whether this is valid&lt;/p>
&lt;p>move(self, time:int) -> increment distance traveled by moving at current speed for given amount of time&lt;/p>
&lt;/section>
&lt;section>
&lt;h1>Fin.&lt;/h1>
&lt;/section>
&lt;section data-visibility="uncounted">
&lt;p>Made with &lt;3 and Reveal.js&lt;/p>
&lt;p>By ksam&lt;/p>
&lt;p>With help from &lt;/p>
&lt;/section>
&lt;/div>
&lt;/div>
&lt;script src="https://www.kandasamyc.com/js/pres/frc/reveal.js">&lt;/script>
&lt;script src="https://www.kandasamyc.com/js/pres/frc/plugin/notes/notes.js">&lt;/script>
&lt;script src="https://www.kandasamyc.com/js/pres/frc/plugin/search/search.js">&lt;/script>
&lt;script src="https://www.kandasamyc.com/js/pres/frc/plugin/highlight/highlight.js">&lt;/script>
&lt;script>
// Also available as an ES module, see:
// https://revealjs.com/initialization/
Reveal.initialize({
controls: false,
progress: true,
center: true,
hash: true,
// Learn about plugins: https://revealjs.com/plugins/
plugins: [RevealNotes, RevealSearch, RevealHighlight],
});
&lt;/script>
&lt;style>
.reveal > .slides > section > section {
transform-style: flat;
}
&lt;/style>
&lt;/body>
&lt;/html></content></item></channel></rss>